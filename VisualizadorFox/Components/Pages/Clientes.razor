@page "/Clientes"
@using System.ComponentModel.DataAnnotations

<h3 class="mb-4">Clientes</h3>

<div class="card p-3 mb-4 shadow-sm">
    <div class="d-flex gap-2 align-items-center">
        <input type="text" class="form-control w-25" placeholder="Buscar por nome..." @bind="filtroNome" />
        <button class="btn btn-outline-light bg-dark text-white" @onclick="AplicarFiltro">
            <i class="bi bi-search me-1"></i> Filtrar
        </button>
    </div>
</div>

@if (clientesFiltrados.Any())
{
    <div class="card shadow-sm">
        <table class="table table-dark table-hover table-bordered mb-0">
            <thead class="table-light text-black">
                <tr>
                    <th>Id</th>
                    <th>Nome</th>
                    <th>Email</th>
                    <th>Telefone</th>
                    <th style="width: 120px;">Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cliente in clientesFiltrados)
                {
                    <tr>
                        <td>@cliente.Id</td>
                        <td>@cliente.Nome</td>
                        <td>@cliente.Email</td>
                        <td>@cliente.Telefone</td>
                        <td>
                            <button class="btn btn-sm btn-outline-info" @onclick="() => ExibirDetalhes(cliente)">
                                <i class="bi bi-eye"></i> Detalhes
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-warning mt-3">Nenhum cliente encontrado.</div>
}

@if (clienteSelecionado is not null)
{
    <div class="card mt-4 shadow-sm border border-info">
        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
            <strong>Detalhes do Cliente</strong>
            <button class="btn btn-sm btn-light" @onclick="FecharDetalhes">Fechar</button>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Nome:</dt>
                <dd class="col-sm-9">@clienteSelecionado.Nome</dd>

                <dt class="col-sm-3">Email:</dt>
                <dd class="col-sm-9">@clienteSelecionado.Email</dd>

                <dt class="col-sm-3">Telefone:</dt>
                <dd class="col-sm-9">@clienteSelecionado.Telefone</dd>
            </dl>
        </div>
    </div>
}

@code {
    private string filtroNome = string.Empty;
    private List<ClienteModel> clientes = new();
    private List<ClienteModel> clientesFiltrados = new();
    private ClienteModel? clienteSelecionado;

    protected override void OnInitialized()
    {
        clientes = new List<ClienteModel>
        {
            new ClienteModel
            {
                Id = 1,
                Nome = "João da Silva",
                Email = "joao@email.com",
                Telefone = "(11) 99999-0001"
            },
            new ClienteModel
            {
                Id = 2,
                Nome = "Maria Oliveira",
                Email = "maria@email.com",
                Telefone = "(11) 98888-0002"
            },
            new ClienteModel
            {
                Id = 3,
                Nome = "Carlos Santos",
                Email = "carlos@email.com",
                Telefone = "(11) 97777-0003"
            }
        };

        clientesFiltrados = clientes;
    }

    private void AplicarFiltro()
    {
        clientesFiltrados = clientes
            .Where(c => string.IsNullOrWhiteSpace(filtroNome) ||
                        c.Nome.Contains(filtroNome, StringComparison.OrdinalIgnoreCase))
            .ToList();

        clienteSelecionado = null;
    }

    private void ExibirDetalhes(ClienteModel cliente)
    {
        clienteSelecionado = cliente;
    }

    private void FecharDetalhes()
    {
        clienteSelecionado = null;
    }

    public class ClienteModel
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Nome { get; set; } = string.Empty;

        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Phone]
        public string Telefone { get; set; } = string.Empty;
    }
}
